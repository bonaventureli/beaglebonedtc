#!/bin/sh

echo "Loading firmware, please wait..."

# Default PATH differs between shells, and is not automatically exported
# by klibc dash.  Make it consistent.
export PATH=/sbin:/usr/sbin:/bin:/usr/bin

[ -d /dev ] || mkdir -m 0755 /dev
[ -d /root ] || mkdir -m 0700 /root
[ -d /sys ] || mkdir /sys
[ -d /proc ] || mkdir /proc
[ -d /tmp ] || mkdir /tmp
mkdir -p /var/lock
mount -t sysfs -o nodev,noexec,nosuid sysfs /sys
mount -t proc -o nodev,noexec,nosuid proc /proc

# Note that this only becomes /dev on the real filesystem if udev's scripts
# are used; which they will be, but it's worth pointing out
tmpfs_size="10M"
if [ -e /etc/udev/udev.conf ]; then
  . /etc/udev/udev.conf
fi
if ! mount -t devtmpfs -o size=$tmpfs_size,mode=0755 udev /dev; then
  echo "W: devtmpfs not available, falling back to tmpfs for /dev"
  mount -t tmpfs -o size=$tmpfs_size,mode=0755 udev /dev
  [ -e /dev/console ] || mknod -m 0600 /dev/console c 5 1
  [ -e /dev/null ] || mknod /dev/null c 1 3
fi
mkdir /dev/pts
mount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts || true
mount -t tmpfs -o "nosuid,size=20%,mode=0755" tmpfs /run
mkdir -m 0755 /run/initramfs

# Export the dpkg architecture
export DPKG_ARCH=
. /conf/arch.conf

# Set modprobe env
export MODPROBE_OPTIONS="-qb"

# Export relevant variables
export main=
export break=
export init=/sbin/init
export quiet=n
export rootmnt=/root
export mainmnt=/main
export debug=
export panic=
export blacklist=
export MAINFSTYPE=
export MAINFLAGS=
export ROOTFSTYPE=squashfs
export ROOTFLAGS='-o loop'
export FIRMWARE_DIR=
export VERSIONS_FILE=

# Bring in the main config
. /conf/initramfs.conf
for conf in conf/conf.d/*; do
  [ -f ${conf} ] && . ${conf}
done
. /scripts/functions

# Parse command line options
for x in $(cat /proc/cmdline); do
  case $x in
  init=*)
    init=${x#init=}
    ;;
  main=*)
    MAIN=${x#main=}
    ;;
  mainflags=*)
    MAINFLAGS="-o ${x#mainflags=}"
    ;;
  mainfstype=*)
    MAINFSTYPE="${x#mainfstype=}"
    ;;
  firmware=*)
    FIRMWARE_DIR="${mainmnt}/${x#firmware=}"
    ;;
  versions=*)
    VERSIONS_FILE="${mainmnt}/${x#versions=}"
    ;;
  panic=*)
    panic="${x#panic=}"
    case ${panic} in
    *[![:digit:].]*)
      panic=
      ;;
    esac
    ;;
  quiet)
    quiet=y
    ;;
  debug)
    debug=y
    quiet=n
    exec >/run/initramfs/initramfs.debug 2>&1
    set -x
    ;;
  debug=*)
    debug=y
    quiet=n
    set -x
    ;;
  break=*)
    break=${x#break=}
    ;;
  break)
    break=premount
    ;;
  blacklist=*)
    blacklist=${x#blacklist=}
    ;;
  esac
done

maybe_break top

# Don't do log messages here to avoid confusing graphical boots
run_scripts /scripts/init-top

maybe_break modules
[ "$quiet" != "y" ] && log_begin_msg "Loading essential drivers"
load_modules
[ "$quiet" != "y" ] && log_end_msg

maybe_break premount
[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/init-premount"
run_scripts /scripts/init-premount
[ "$quiet" != "y" ] && log_end_msg

maybe_break mount
maybe_break mountroot

mount_main_storage() {
  # Make the mount point for main storage
  if [ ! -d "${mainmnt}" ]; then
    mkdir -m 0700 "${mainmnt}"
  fi

  # Check main filesystem
  checkfs "${MAIN}" main

  # Mount the main storage
  log_begin_msg "Mounting main storage"
  if ! mount -n -t "${MAINFSTYPE}" ${MAINFLAGS} "${MAIN}" "${mainmnt}"; then
    panic "Could not mount main storage ${MAIN} on ${mainmnt}"
  fi
  log_end_msg
}

mount_image() {
  # Mount the firmware image
  log_begin_msg "Mounting firmware image (${image_name}) as root filesystem"
  if ! mount -t "${ROOTFSTYPE}" "${ROOTFLAGS}" "${FIRMWARE_DIR}/${image_name}" "${rootmnt}"; then
    panic "Could not mount root filesystem ${FIRMWARE_DIR}/${image_name} on ${rootmnt}"
  fi
  log_end_msg

  # Move the mount point of the main storage into the root filesystem
  log_begin_msg "Moving mount point of main storage into root filesystem"
  if ! mount -n -o move "${mainmnt}" "${rootmnt}${mainmnt}"; then
    panic "Could not move main storage mount point ${mainmnt} on ${rootmnt}${mainmnt}"
  fi
  log_end_msg
}

check_image () {
  local entry="${1}"
  local entry_file=/tmp/entry
  unset image_name

  # Write entry to entry file
  echo "${entry}" > "${entry_file}"

  # Check the image against the entry file
  # If the specified entry is valid, image_name gets set to the image filename, otherwise image_name is empty
  # md5sum needs to be run in the directory containing the files to check
  if ( cd "${FIRMWARE_DIR}" && md5sum -c "${entry_file}" > /dev/null 2>&1 ); then
    # Get the image name
    set -- $entry
    image_name=$2
  fi

  rm -f "${entry_file}"
}

# Make sure the device tree is ready
wait_for_udev 10

# Ensure loading of filesystem drivers
if ! modprobe "${ROOTFSTYPE}"; then
  panic "Could not load ${ROOTFSTYPE} kernel module for root filesystem"
fi

if ! modprobe loop; then
  panic "Could not load loop kernel module for root filesystem"
fi

if ! modprobe "${MAINFSTYPE}"; then
  panic "Could not load ${MAINFSTYPE} kernel module for main storage filesystem"
fi

mount_main_storage

# The last line in the versions file corresponds to the primary firmware image
check_image "$(tail -n 1 "${VERSIONS_FILE}")"

if [ ! -z "${image_name}" ]; then
  echo "Found valid firmware image: ${image_name}, mounting as root filesystem"
  mount_image
else
  echo "Primary firmware image invalid, checking backup"

  # The first line in the versions file corresponds to the backup firmware image
  check_image "$(head -n 1 "${VERSIONS_FILE}")"

  if [ ! -z "${image_name}" ]; then
    echo "Found valid firmware image: ${image_name}, mounting as root filesystem"
    mount_image
  else
   panic "Unable to locate a valid firmware image"
  fi
fi

validate_init() {
  checktarget="${1}"

  # Work around absolute symlinks
  if [ -d "${rootmnt}" ] && [ -h "${rootmnt}${checktarget}" ]; then
    checktarget="$(readlink "${rootmnt}${checktarget}")"
    case "$checktarget" in
    /*)
      ;;
    *)
      checktarget="${1%/*}/$checktarget"
      ;;
    esac
  fi

  # Make sure the specified init can be executed
  if [ ! -x "${rootmnt}${checktarget}" ]; then
    return 1
  fi

  # Upstart uses /etc/init as configuration directory :-/
  if [ -d "${rootmnt}${checktarget}" ]; then
    return 1
  fi
}

# Check if init is really there
if ! validate_init "$init"; then
  echo "Target filesystem doesn't have requested ${init}."
  init=
  for inittest in /sbin/init /etc/init /bin/init /bin/sh; do
    if validate_init "${inittest}"; then
      init="$inittest"
      break
    fi
  done
fi

maybe_break bottom
[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/init-bottom"
run_scripts /scripts/init-bottom
[ "$quiet" != "y" ] && log_end_msg

# Preserve information on old systems without /run on the rootfs
if [ -d ${rootmnt}/run ]; then
  mount -n -o move /run ${rootmnt}/run
else
  # The initramfs udev database must be migrated:
  if [ -d /run/udev ] && [ ! -d /dev/.udev ]; then
    mv /run/udev /dev/.udev
  fi
  # The initramfs debug info must be migrated:
  if [ -d /run/initramfs ] && [ ! -d /dev/.initramfs ]; then
    mv /run/initramfs /dev/.initramfs
  fi
  umount /run
fi

# No init on rootmount
if ! validate_init "${init}" ; then
  panic "No init found. Try passing init= bootarg."
fi

maybe_break init

# don't leak too much of env - some init(8) don't clear it
# (keep init, rootmnt)
unset MAIN
unset debug
unset MODPROBE_OPTIONS
unset DPKG_ARCH
unset blacklist
unset break
unset panic
unset quiet
unset readonly
unset mainmnt
unset MAINFSTYPE
unset MAINFLAGS
unset ROOTFSTYPE
unset FIRMWARE_DIR
unset VERSIONS_FILE

# Move virtual filesystems over to the real filesystem
mount -n -o move /sys ${rootmnt}/sys
mount -n -o move /proc ${rootmnt}/proc

# Change to real filesystem
exec switch_root ${rootmnt} ${init} "$@" <${rootmnt}/dev/console >${rootmnt}/dev/console
panic "Something went badly wrong in the initramfs."
